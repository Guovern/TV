name: Release
on:
  workflow_dispatch:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
          cache: 'pipenv'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies with pipenv
        run: pipenv --python 3.8 && pipenv install

      - name: Install PyInstaller
        run: pipenv install pyinstaller

      - name: Build the application
        run: pipenv run pyinstaller tkinter_ui.spec

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: update-tool
          path: dist/update-tool

      - name: Get version from version.json
        id: get_info
        run: |
          $version = (Get-Content version.json | ConvertFrom-Json).version
          echo "version=$version" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Install jq
        run: choco install jq

      - name: Get changelog
        id: get_changelog
        run: |
          $changelog = Get-Content CHANGELOG.md -Raw | Select-String -Pattern "## v${{ env.version }}" -Context 0,100 | ForEach-Object { $_.Line }
          $changelog = $changelog -join "`n" | Select-String -Pattern "###" -Context 0,100 | ForEach-Object { $_.Line }
          $changelog = $changelog -join "`n" | Select-String -Pattern "## v" -NotMatch | ForEach-Object { $_.Line }
          $changelog = $changelog -join "`n" | Select-String -Pattern "###" -NotMatch | ForEach-Object { $_.Line }
          echo "changelog=$(echo $changelog | jq -R -s .)" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: v${{ env.version }}
          body: ${{ fromJSON(env.changelog) }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/update-tool
          asset_name: update-tool.exe
          asset_content_type: application/octet-stream
